// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoPower;

    /** Initializes the library. */
    function void init() {
    let twoPower = Array.new(16);
    let twoPower[0] = 1;
    let twoPower[1] = 2;
    let twoPower[2] = 4;
    let twoPower[3] = 8;
    let twoPower[4] = 16;
    let twoPower[5] = 32;
    let twoPower[6] = 64;
    let twoPower[7] = 128;
    let twoPower[8] = 256;
    let twoPower[9] = 512;
    let twoPower[10] = 1024;
    let twoPower[11] = 2048;
    let twoPower[12] = 4096;
    let twoPower[13] = 8192;
    let twoPower[14] = 16384;
    let twoPower[15] = -32767 - 1;
    return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    var int ans;
    if(x < 0)
    { let ans = x * -1; }
    else
    { let ans = x; }
    return ans;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    var int i, sum, shiftedx;
    let i = 0;
    let shiftedx = x;
    let sum = 0;
    while(i < 16)
    {
    if((y & twoPower[i]) = twoPower[i])
    { let sum = sum + shiftedx; } 
    let shiftedx = shiftedx + shiftedx;
    let i = i + 1;
    }
    return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    var int neg, ans;
    if(x < 0) { if(y > 0) { let neg = 1;} }
    if(y < 0) { if(x > 0) { let neg = 1;} }
    let ans = Math.divide_helper(Math.abs(x), Math.abs(y));
    if(neg = 1)
    { let ans = ans * -1;}
    return ans;
    }

    function int divide_helper(int x, int y) {
    var int q;
    if(y > x){ return 0;}
    if(y < 0){ return 0;}
    let q = Math.divide_helper(x, y + y);
    if((x - (2 * q * y)) < y)
    { return q + q;}
    else
    { return q + q + 1;}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    var int start, end, ans, mid;
    if(x = 0)
    {return 0;}
    if(x = 1)
    {return 1;}
    let start = 1;
    let end = x;
    while(start < end)
    {
        if( (start + end) > 0)
        {
        let mid = ((start + end ) / 2);
        }
        else{
        let mid = end / 2;
        }
        if(mid * mid < 0)
        {
        let end = mid -1;
        }
        else
        {
        if((mid * mid) = x)
        { let ans = mid;
          let start =  end + 1;}
        if((mid * mid) < x)
        {
        let start = mid + 1;
        let ans = mid;
        }
        else
        {let end = mid - 1;}
        }
    }
    return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    var int ans;
    if(a < b){ let ans = b;}
    else{ let ans = a;}
    return ans;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    var int ans;
    if(a < b){ let ans = a;}
    else{ let ans = b;}
    return ans;
    }
}
