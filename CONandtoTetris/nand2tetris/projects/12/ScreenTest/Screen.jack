// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int color;

    /** Initializes the Screen. */
    function void init() {
    let color = 1;
    return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    var int i, j, ret_to_one;
    let i = 0;
    let j = 0;
    let ret_to_one = 0;
    if(color = 1)
    {let ret_to_one = 1;}
    do Screen.setColor(0);
    while(j < 256)
    {
        let i = 0;
        while(i < 512)
        {
            do Screen.drawPixel(i, j);
            let i = i + 1;
        }
        let j = j + 1; 
    }
    if(ret_to_one = 1)
    {do Screen.setColor(1);}
    return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    if(b)
    {let color = 1;}
    else
    {let color = 0;}
    return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    var int addr, rem, value, i, cal;
    let addr = (32 * y) + (x / 16);
    let rem = x - (16 * (x / 16));
    let value = Memory.peek(16384 + addr);
    let i = 0;
    let cal = 1;
    while(i < rem)
    {
        let cal = cal + cal;
        let i = i + 1;
    }
    if(color = 1)
    { let value = value | cal;}
    else
    { let value = value & (~cal);}
    do Memory.poke(16384 + addr, value);
    return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    var int flag, swap, dx, dy, a, b, diff;
    let flag = 0;
    if(x1 = x2)
    {
        if(y1 > y2)
        {
            let swap = y1;
            let y1 = y2;
            let y2 = swap;
        }
        while(~(y1 = y2))
        {
            do Screen.drawPixel(x1, y1);
            let y1 = y1 + 1; 
        }
        let flag = 1;
    }
    if(y1 = y2)
    {
        if(x1 > x2)
        {
            let swap = x1;
            let x1 = x2;
            let x2 = swap;
        }
        while(~(x1 = x2))
            {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1; 
            }
        let flag = 1;
    }
    if(flag = 0)
    {
        if(x1 > x2)
        {
            let swap = x1;
            let x1 = x2;
            let x2 = swap;
            let swap = y1;
            let y1 = y2;
            let y2 = swap;
        }
        let dx = x2 - x1;
        let a = 0;
        let b = 0;
        let diff = 0;
        if(y1 < y2)
        {
            let dy = y2 - y1;
            while((a < (dx + 1)) & (b < (dy + 1)))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0 )
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            } 
        }
        else
        {
            let dy = y1 - y2;
            
            while((a < (dx + 1)) & (b < (dy + 1)))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff > 0 )
                {
                    let a = a + 1;
                    let diff = diff - dy;
                }
                else
                {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
        }
        
    }
    return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    while(y1 < (y2 +1))
    {
        do Screen.drawLine(x1, y1, x2, y1);
        let y1 = y1 + 1;
    }
    return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    var int dy, rt;
    let dy = -r;
    while(dy < (r + 1))
    {
        do Screen.drawLine(x - (Math.sqrt(((r * r) - (dy * dy)))), y + dy ,
        x + (Math.sqrt(((r * r) - (dy * dy)))), y + dy);
        let dy = dy + 1; 
    }
    return;
    }
}
