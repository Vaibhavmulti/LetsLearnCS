// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length, maxlength;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    if(maxLength = 0)
    {let maxLength = 1;}
    let str = Array.new(maxLength);
    let maxlength = maxLength;
    let length = 0;
    return this;
    }

    /** Disposes this string. */
    method void dispose() {
    do Memory.deAlloc(str);
    return;
    }

    /** Returns the current length of this string. */
    method int length() {
    return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    let str[j] = c;
    return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    let str[length] = c;
    let length = length + 1;
    return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    let length = length - 1;
    return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    var int len, i, val, tp, flag;
    var char c;
    let len = length();
    let i = 0;
    let val = 0;
    let flag = 0;
    while(i < len)
    {
        let c = charAt(i);
        if(c = 45)
        {let flag = 1;}
        else
        {
            let tp = String.intmapping(charAt(i));
            let val = (val * 10) + tp;
        }
        let i = i + 1;
    }
    if(flag = 1)
    {let val = val * -1;}
    return val;
    }
    function char mapping(int val)
    {
        return 48 + val;
    }
    
    function int intmapping(char c)
    {
        return c - 48;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    var int pow_ten, flag, idx;
        let pow_ten = 10;
        let flag = 0;
        let idx = 0;
        let length = 0;
        if(val < 0)
        {
            let val = val * -1;
            do appendChar(45);
        }
        while(flag = 0 & (~(pow_ten < 0)))
        {
            if((val / pow_ten) = 0)
            {let flag = 1;}
            else
            {let pow_ten = pow_ten * 10;}
        }
        if(pow_ten < 0)
        {let pow_ten = 10000;}
        else
        {let pow_ten = pow_ten / 10;}
        while(~(val = 0))
        {
            do appendChar(String.mapping(val / pow_ten));
            let val = val - (pow_ten * (val / pow_ten));
            let pow_ten = pow_ten / 10;
        }
    return;
    }

    /** Returns the new line character. */
    function char newLine() {
    return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    return 34;
    }
}
