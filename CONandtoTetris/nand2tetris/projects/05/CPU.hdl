 // This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The instruction input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction,b=aluA,sel=instruction[15],out=inA);
    Not(in=instruction[15],out=notAinstruction);
    Or(a=notAinstruction,b=instruction[5],out=loadAReg);
    ARegister(in=inA,load=loadAReg,out=pcinp,out=mux2,out[0..14]=addressM);
    Mux16(a=mux2,b=inM,sel=instruction[12],out=aluinp2);
    Mux(a=false,b=true,sel=instruction[15],out=aYAc);
    And(a=aYAc,b=instruction[4],out=loadDReg);
    DRegister(in=aluD,load=loadDReg,out=aluinp1);
    ALU(x=aluinp1,y=aluinp2,zx=instruction[11],nx=instruction[10],
    zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
    out=aluA,out=aluD,out=outM,zr=pc1,ng=pc2);
    And(a=instruction[15],b=instruction[3],out=writeM);
    DMux8Way(in=true,sel=instruction[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    And(a=a,b=false,out=a1);
    Not(in=pc1,out=notzero);
    Not(in=pc2,out=notneg);
    And(a=notzero,b=notneg,out=notzeroANDnotneg);
    And(a=b,b=notzeroANDnotneg,out=b1);
    And(a=c,b=pc1,out=c1);
    Or(a=notneg,b=pc1,out=notnegORzero);
    And(a=d,b=notnegORzero,out=d1);
    And(a=e,b=pc2,out=e1);
    And(a=f,b=notzero,out=f1);
    Or(a=pc2,b=pc1,out=zrORng);
    And(a=g,b=zrORng,out=g1);
    And(a=h,b=true,out=h1);
    Or8Way(in[0]=a1,in[1]=b1,in[2]=c1,in[3]=d1,in[4]=e1,in[5]=f1,in[6]=g1,
    in[7]=h1,out=loader);
    And(a=loader,b=instruction[15],out=loadANDAinst);
    Not(in=loadANDAinst,out=increase);
    PC(in=pcinp,reset=reset,load=loadANDAinst,inc=increase,out[0..14]=pc);
}